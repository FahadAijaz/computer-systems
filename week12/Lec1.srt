1
00:00:00,256 --> 00:00:06,400
This material is made available to you by Robbie half of the University of Melbourne

2
00:00:06,656 --> 00:00:12,800
Of the copyright act 1968 it may be subject to copyright for more information visit the university

3
00:00:13,056 --> 00:00:14,080
Copyright website

4
00:00:15,616 --> 00:00:16,640
Ok

5
00:00:25,344 --> 00:00:31,488
Good morning everybody

6
00:00:31,744 --> 00:00:37,888
It's really useful

7
00:00:39,936 --> 00:00:46,080
But if you have something to say

8
00:00:46,336 --> 00:00:49,664
Please write a comment we really like hearing what you think of the course

9
00:00:51,712 --> 00:00:57,856
Today was providing the background to understand

10
00:00:58,112 --> 00:01:00,160
Brand is vulnerability called spectre

11
00:01:00,416 --> 00:01:05,792
Today we're going to see that drawing on what you've already went

12
00:01:06,560 --> 00:01:08,352
Before we do that

13
00:01:08,864 --> 00:01:15,008
A couple of concerns people have had a couple of misconceptions first you don't need to know any assembly language

14
00:01:15,264 --> 00:01:16,800
For this subject

15
00:01:17,312 --> 00:01:23,456
A couple of weeks ago

16
00:01:25,504 --> 00:01:31,648
I don't expect you to know the instructions for any particular

17
00:01:31,904 --> 00:01:34,720
Machine

18
00:01:34,976 --> 00:01:41,120
I would like to know the difference between the instruction set architecture

19
00:01:41,888 --> 00:01:44,704
And micro-architecture which is

20
00:01:44,960 --> 00:01:49,568
The lower level stuff which interprets those distraction

21
00:01:51,360 --> 00:01:57,504
Second thing is something I've been saying about the project two didn't quite work

22
00:01:58,016 --> 00:02:04,160
Face isn't going to be a second phase like that was the first projects

23
00:02:04,416 --> 00:02:10,560
Is it going to be something or not

24
00:02:10,816 --> 00:02:14,400
We're going to look at

25
00:02:14,656 --> 00:02:18,752
You get a mark based on that goes marks won't be negotiable

26
00:02:19,520 --> 00:02:25,664
We will however make sure

27
00:02:38,208 --> 00:02:43,584
Ok

28
00:02:44,096 --> 00:02:48,192
Of

29
00:02:49,472 --> 00:02:55,616
Closely related

30
00:02:56,640 --> 00:03:01,760
And some prices have multiple threads a threat is a sequence of executions

31
00:03:02,272 --> 00:03:03,296
Within a process

32
00:03:04,832 --> 00:03:08,160
Multiple threads in a process share a lot of resources

33
00:03:08,416 --> 00:03:14,560
This also makes it easier for them to communicate

34
00:03:14,816 --> 00:03:18,144
And work together as a team

35
00:03:18,912 --> 00:03:25,056
We saw the notion of security contacts to the process

36
00:03:25,312 --> 00:03:31,456
Liquor store

37
00:03:31,712 --> 00:03:36,832
Parramatta privilege the processes to handle

38
00:03:39,136 --> 00:03:43,488
Today we're going to be looking at his spectre itself

39
00:03:43,744 --> 00:03:49,888
We shouldn't really be allowed to read it

40
00:03:50,144 --> 00:03:53,728
Protection of memory

41
00:03:54,752 --> 00:03:56,288
The basic technique

42
00:03:56,800 --> 00:03:59,360
Is

43
00:03:59,872 --> 00:04:06,016
Speculative execute code the real process of the wheel

44
00:04:06,272 --> 00:04:08,576
Assembly language would never execute

45
00:04:09,088 --> 00:04:12,928
And then this will cause some side effects

46
00:04:13,184 --> 00:04:14,976
Are we observed that side effect

47
00:04:16,512 --> 00:04:22,655
We look at ways we can do this why isn't causing this speculative execution either inside

48
00:04:22,911 --> 00:04:29,055
Sandbox inside some supposedly safe environment

49
00:04:29,311 --> 00:04:34,943
Berkeley packet filters

50
00:04:35,967 --> 00:04:42,111
Implicitly this letter is revision of the past three lectures

51
00:04:46,975 --> 00:04:50,559
If you find something that doesn't make sense

52
00:04:50,815 --> 00:04:56,959
And probably other people will also benefit from

53
00:05:00,799 --> 00:05:04,383
OK Google spectre is reading memory

54
00:05:05,919 --> 00:05:10,015
Any given time there are lots of processes in memory

55
00:05:10,783 --> 00:05:15,135
Is the kernel in memory processes

56
00:05:16,415 --> 00:05:21,023
Processes is likely to be storing some sensitive information

57
00:05:22,303 --> 00:05:27,679
Storing a key for an SSL session

58
00:05:28,191 --> 00:05:34,335
Password manager

59
00:05:34,591 --> 00:05:35,359
Random websites

60
00:05:35,871 --> 00:05:42,015
From a user like bank account information or Bank

61
00:05:42,271 --> 00:05:43,551
Password

62
00:05:43,807 --> 00:05:46,111
All of this is

63
00:05:46,367 --> 00:05:52,511
Very well protected by the way

64
00:05:52,767 --> 00:05:58,143
You're not allowed to access that memory and put in

65
00:05:58,399 --> 00:06:03,007
Roblox say you're not going to access memory

66
00:06:05,311 --> 00:06:05,823
Bus

67
00:06:06,591 --> 00:06:12,735
Around these blocks

68
00:06:12,991 --> 00:06:15,551
Any processes address space

69
00:06:21,695 --> 00:06:27,839
Not quite it has to be in the address space of a process that can influence

70
00:06:29,375 --> 00:06:35,519
He doesn't have to be that process to run process

71
00:06:35,775 --> 00:06:38,079
The execution of process

72
00:06:39,871 --> 00:06:46,015
So as long as we can trick the process of forming a fairly generic sequence of operations

73
00:06:46,271 --> 00:06:50,367
To see more details soon

74
00:06:51,135 --> 00:06:53,439
Then we can access it's memory

75
00:07:00,607 --> 00:07:05,727
We're going to focus on variant one which is violating bounds checking

76
00:07:08,799 --> 00:07:14,943
All of you know or should know from somewhere

77
00:07:15,199 --> 00:07:19,807
And then use that

78
00:07:20,319 --> 00:07:25,183
Check

79
00:07:25,439 --> 00:07:29,535
You know you should do that big if you don't do that you'll get a segmentation fault

80
00:07:29,791 --> 00:07:30,815
Crash

81
00:07:33,631 --> 00:07:36,447
So

82
00:07:37,215 --> 00:07:41,823
The buffer

83
00:07:42,079 --> 00:07:43,615
Location

84
00:07:46,175 --> 00:07:48,479
To do

85
00:07:54,111 --> 00:07:55,647
Memory

86
00:07:55,903 --> 00:07:57,183
Orphan

87
00:07:57,439 --> 00:07:59,487
Processes address space

88
00:08:00,255 --> 00:08:02,559
Even if it's not part of that process

89
00:08:03,839 --> 00:08:07,679
That the first one

90
00:08:09,215 --> 00:08:12,799
Until this was standard practice

91
00:08:15,871 --> 00:08:18,431
The address of the user

92
00:08:19,967 --> 00:08:21,759
Why on earth would you do this

93
00:08:22,527 --> 00:08:28,671
What the reason we do this is because the user will occasionally make a system call them

94
00:08:29,183 --> 00:08:33,535
If you make it a write statement

95
00:08:34,047 --> 00:08:37,375
Inside the library

96
00:08:38,655 --> 00:08:39,679
To write

97
00:08:39,935 --> 00:08:43,263
Is using a socket

98
00:08:43,519 --> 00:08:45,311
Coles

99
00:08:51,711 --> 00:08:52,735
Change

100
00:08:53,247 --> 00:08:57,343
The address space space

101
00:08:58,367 --> 00:09:03,487
All of the information get thrown out

102
00:09:04,511 --> 00:09:09,119
Unfortunately I didn't have time to talk to you about translation

103
00:09:09,375 --> 00:09:15,519
Remember this

104
00:09:17,567 --> 00:09:19,615
Location

105
00:09:24,479 --> 00:09:30,623
And so ugly every time

106
00:09:34,719 --> 00:09:39,071
The address lookup

107
00:09:40,351 --> 00:09:44,191
We don't want that

108
00:09:45,983 --> 00:09:49,567
Taste version of the page table

109
00:09:54,175 --> 00:09:57,759
Cases this mapping so the ball runs fast

110
00:10:02,879 --> 00:10:05,695
Unchanged

111
00:10:05,951 --> 00:10:10,303
Change process

112
00:10:11,327 --> 00:10:13,375
We need a different page table

113
00:10:13,887 --> 00:10:18,495
So if the clear

114
00:10:19,519 --> 00:10:22,335
And that means every time we access ram

115
00:10:22,591 --> 00:10:27,967
We need to do to access is slow

116
00:10:28,479 --> 00:10:31,807
So to make Colonel faster

117
00:10:39,999 --> 00:10:45,375
Ok we still need to change the program

118
00:10:45,631 --> 00:10:49,727
We don't have permission to access

119
00:10:58,687 --> 00:11:04,831
Every single process

120
00:11:05,855 --> 00:11:11,999
Within multiple address spaces

121
00:11:20,447 --> 00:11:26,591
The other example where the process address space contain David

122
00:11:26,847 --> 00:11:29,919
Case

123
00:11:30,943 --> 00:11:33,759
Something

124
00:11:34,271 --> 00:11:39,903
Processes

125
00:11:40,415 --> 00:11:42,975
In your browser unless you turn it off

126
00:11:43,231 --> 00:11:45,535
JavaScript enabled

127
00:11:46,047 --> 00:11:52,191
This means that

128
00:11:53,727 --> 00:11:59,871
That's seriously dangerous strangers

129
00:12:00,127 --> 00:12:06,271
Computer

130
00:12:06,527 --> 00:12:09,855
It doesn't send it

131
00:12:10,111 --> 00:12:16,255
Is very careful with

132
00:12:17,791 --> 00:12:23,935
Sure when location is something that is supposed to be able to

133
00:12:27,263 --> 00:12:28,287
Unless

134
00:12:31,359 --> 00:12:33,407
We also stores

135
00:12:40,063 --> 00:12:42,879
Destruction

136
00:12:44,415 --> 00:12:49,023
Start off with fishing instruction

137
00:13:01,055 --> 00:13:05,663
Conditional Grant conditional jump

138
00:13:07,199 --> 00:13:10,527
It one of those

139
00:13:11,295 --> 00:13:12,319
Next

140
00:13:12,575 --> 00:13:14,879
It depends on

141
00:13:15,135 --> 00:13:16,159
Awful

142
00:13:17,183 --> 00:13:18,719
So we have to guess

143
00:13:18,975 --> 00:13:21,279
This is called speculative execution

144
00:13:24,863 --> 00:13:28,447
What we would do is look at this particular type of

145
00:13:28,703 --> 00:13:29,727
Brunch

146
00:13:34,591 --> 00:13:39,199
In this location

147
00:13:39,455 --> 00:13:41,503
Normal evaluates to false

148
00:13:47,135 --> 00:13:53,279
So would go ahead and executing the wood

149
00:13:55,583 --> 00:13:57,887
What happens if

150
00:13:58,399 --> 00:14:02,239
Well then we just make sure we don't actually write the results

151
00:14:04,799 --> 00:14:06,591
Within the microarchitecture

152
00:14:07,359 --> 00:14:12,735
We have buffers Witnesses with in the microwave

153
00:14:13,503 --> 00:14:15,039
Find out

154
00:14:15,295 --> 00:14:18,111
Whether or not

155
00:14:19,647 --> 00:14:22,463
Tiring instructor

156
00:14:22,975 --> 00:14:26,559
Retiring means put into bed finish it up

157
00:14:26,815 --> 00:14:32,959
The buffers visible Isa registers

158
00:14:36,031 --> 00:14:40,383
This is all good

159
00:14:40,895 --> 00:14:41,919
Befriend

160
00:14:42,431 --> 00:14:47,807
Before it actually a valid location or not

161
00:14:50,879 --> 00:14:56,767
Good access

162
00:14:57,279 --> 00:14:58,559
Exception

163
00:14:59,071 --> 00:15:05,215
And I'm sure you all come across it every time you get it

164
00:15:09,567 --> 00:15:11,103
When does it happen

165
00:15:11,871 --> 00:15:15,711
Open Access

166
00:15:15,967 --> 00:15:17,247
Because remember

167
00:15:21,343 --> 00:15:22,879
The timer accessing it

168
00:15:23,391 --> 00:15:25,695
Westpac

169
00:15:25,951 --> 00:15:28,767
Will the code retires

170
00:15:29,023 --> 00:15:31,583
Exception

171
00:15:33,119 --> 00:15:35,167
Ok so only cause

172
00:15:35,423 --> 00:15:39,519
Embarrassing I'm not allowed to read this beta

173
00:15:40,287 --> 00:15:45,663
When are about to commit that to the real instruction set architecture

174
00:15:47,199 --> 00:15:50,527
The problem is speculative execution

175
00:15:50,783 --> 00:15:53,599
Instructions on never retired

176
00:15:54,367 --> 00:15:58,975
Saying

177
00:15:59,743 --> 00:16:05,887
Everybody thought this was safe

178
00:16:07,423 --> 00:16:13,567
Architecture

179
00:16:13,823 --> 00:16:16,639
Music

180
00:16:18,943 --> 00:16:20,223
We have

181
00:16:20,735 --> 00:16:22,015
Hardware remembers

182
00:16:26,111 --> 00:16:27,135
So

183
00:16:28,671 --> 00:16:34,303
Is no exception we think is not harm done unless something happens

184
00:16:36,095 --> 00:16:38,911
Channel

185
00:16:39,423 --> 00:16:41,727
Different meanings in different contexts

186
00:16:41,983 --> 00:16:46,847
Communicating

187
00:16:47,359 --> 00:16:48,895
It was never intended

188
00:16:49,151 --> 00:16:50,175
Communication

189
00:16:51,967 --> 00:16:54,271
Example of a side channel

190
00:16:54,527 --> 00:16:57,855
Let me think

191
00:16:59,903 --> 00:17:03,999
Ok you remember the time to live field in ip packet

192
00:17:05,023 --> 00:17:06,559
Some people

193
00:17:07,071 --> 00:17:12,191
Let's use the last bit of time to live field

194
00:17:12,703 --> 00:17:14,239
Play some information

195
00:17:15,263 --> 00:17:20,639
What's the time believe it or not

196
00:17:20,895 --> 00:17:26,015
Sometimes with zero sometimes with the last bit being one

197
00:17:30,623 --> 00:17:34,719
But the person receiving it gets this 30 than ones

198
00:17:34,975 --> 00:17:41,119
Channel channel

199
00:17:47,775 --> 00:17:49,823
Question

200
00:17:52,895 --> 00:17:59,039
If you can't take it at all it can't use it

201
00:17:59,295 --> 00:18:01,087
You can detect it

202
00:18:01,343 --> 00:18:02,879
If you're looking for

203
00:18:10,815 --> 00:18:12,607
Something like that

204
00:18:12,863 --> 00:18:15,935
It's something you're looking for

205
00:18:16,703 --> 00:18:20,287
Ben 10

206
00:18:20,799 --> 00:18:24,639
Do you want to be

207
00:18:25,407 --> 00:18:31,551
Sweet you can do this or not

208
00:18:37,951 --> 00:18:42,047
And you can do that change anything

209
00:18:42,559 --> 00:18:44,351
State

210
00:18:45,375 --> 00:18:47,423
Second be later red

211
00:18:47,679 --> 00:18:53,823
Stayed inside

212
00:18:59,455 --> 00:19:00,991
The classic one

213
00:19:01,503 --> 00:19:02,783
Is

214
00:19:03,039 --> 00:19:03,807
The case

215
00:19:14,047 --> 00:19:20,191
Only doing things

216
00:19:23,775 --> 00:19:26,079
Alyssa review how page works

217
00:19:27,615 --> 00:19:32,991
Bunch of memory big memory locations cold-case lines

218
00:19:33,503 --> 00:19:36,063
Each of these are shown as being

219
00:19:39,647 --> 00:19:43,999
About 4000 but the same principle applies

220
00:19:48,863 --> 00:19:51,679
Paceline corresponds to

221
00:19:51,935 --> 00:19:58,079
One region of memories anything anything

222
00:19:59,103 --> 00:20:01,663
000 something

223
00:20:02,431 --> 00:20:04,223
Is going to be stored in this

224
00:20:04,735 --> 00:20:05,759
Case line

225
00:20:06,527 --> 00:20:12,671
Eyes 90

226
00:20:13,695 --> 00:20:16,767
Don't really matter anything with that bunch of exes

227
00:20:17,279 --> 00:20:19,839
He's going to be put into this coastline

228
00:20:20,607 --> 00:20:22,911
Remember that we can have multiple

229
00:20:23,167 --> 00:20:28,287
Memory in line if we have both of them

230
00:20:33,663 --> 00:20:39,039
So what do we do without inspector attack

231
00:20:39,807 --> 00:20:43,135
Very natural code here which

232
00:20:43,391 --> 00:20:44,927
Read the memory

233
00:20:45,183 --> 00:20:48,511
To read

234
00:20:51,071 --> 00:20:53,887
How do we expose that to the architecture

235
00:20:59,007 --> 00:21:00,031
And

236
00:21:05,407 --> 00:21:06,431
Another

237
00:21:06,687 --> 00:21:08,223
Memory location

238
00:21:08,991 --> 00:21:14,623
And this again we speak a little before

239
00:21:15,135 --> 00:21:20,512
Because the pipelines can be quite long so we execute this as well

240
00:21:21,024 --> 00:21:23,840
I was going to do it going to read

241
00:21:24,096 --> 00:21:25,888
Different bass lines

242
00:21:26,912 --> 00:21:28,960
Depending on the value of I

243
00:21:30,240 --> 00:21:33,056
And to

244
00:21:33,568 --> 00:21:39,712
Sending this to a level of

245
00:21:39,968 --> 00:21:44,320
Executing

246
00:21:50,208 --> 00:21:51,488
Two computers

247
00:22:00,448 --> 00:22:01,984
Command

248
00:22:02,496 --> 00:22:04,032
The Flash the case

249
00:22:05,056 --> 00:22:11,200
Get rid of everything for whatever reason this is typically used changing contact

250
00:22:11,456 --> 00:22:17,600
You're going from one process to another

251
00:22:29,632 --> 00:22:35,776
Mathematical computations pilot test

252
00:22:38,080 --> 00:22:42,432
See what happens happens

253
00:22:42,688 --> 00:22:43,712
Base on that

254
00:22:44,224 --> 00:22:47,040
I'm going to optimise my later accesses

255
00:22:47,296 --> 00:22:50,368
This is a common thing to do and so clear in the case

256
00:22:50,624 --> 00:22:52,416
Is not a constructor

257
00:22:53,696 --> 00:22:54,976
But

258
00:22:55,232 --> 00:22:58,816
And then run our instruction

259
00:22:59,584 --> 00:23:03,424
Reading from space by x 4096

260
00:23:03,936 --> 00:23:08,288
New island in line

261
00:23:09,568 --> 00:23:12,128
One and only one case line

262
00:23:13,152 --> 00:23:15,712
So what

263
00:23:16,224 --> 00:23:18,784
It will read in data from this location

264
00:23:23,648 --> 00:23:25,952
Bill reading data from this location

265
00:23:26,464 --> 00:23:30,304
That's a long time

266
00:23:31,072 --> 00:23:33,120
Really really quickly

267
00:23:33,376 --> 00:23:38,496
You must have been in this one

268
00:23:39,520 --> 00:23:43,616
I'm sorry can't tell which case line has been accessed

269
00:23:44,128 --> 00:23:45,664
The last flight

270
00:23:49,504 --> 00:23:55,648
Architectural significance

271
00:23:55,904 --> 00:24:02,048
What was the location

272
00:24:02,304 --> 00:24:03,840
Supposed to be able to read from

273
00:24:11,008 --> 00:24:11,776
Sing

274
00:24:12,800 --> 00:24:18,176
What is the spectre in saying we can use execution

275
00:24:18,688 --> 00:24:19,968
Cause this

276
00:24:20,224 --> 00:24:26,368
Operated

277
00:24:29,696 --> 00:24:34,560
Up to newspaper instruction set architecture

278
00:24:37,376 --> 00:24:39,424
I just checked everything

279
00:24:40,192 --> 00:24:44,032
Yes that is most slow anyone with fast

280
00:24:45,824 --> 00:24:47,104
And

281
00:24:49,408 --> 00:24:51,200
That is essentially Spectra

282
00:24:53,504 --> 00:24:57,344
What to do in memory

283
00:24:57,856 --> 00:24:59,392
Do we normally can't read

284
00:25:02,208 --> 00:25:08,352
Executing a coke and some memory

285
00:25:08,608 --> 00:25:12,192
The read we can read

286
00:25:14,240 --> 00:25:20,384
Resource is not something that is

287
00:25:22,176 --> 00:25:28,320
Making out of a sandbox breaking out of the JavaScript Sandbox in particular

288
00:25:29,344 --> 00:25:31,136
This

289
00:25:31,392 --> 00:25:36,000
Again if index is less than the radar length

290
00:25:36,768 --> 00:25:37,536
Then

291
00:25:38,048 --> 00:25:40,096
Read

292
00:25:42,144 --> 00:25:46,752
We do some manipulation here with x 4096

293
00:25:50,336 --> 00:25:52,640
And in and with

294
00:25:52,896 --> 00:25:59,040
Reading hour

295
00:25:59,296 --> 00:26:00,832
Location

296
00:26:01,088 --> 00:26:02,880
Do we actually do

297
00:26:04,928 --> 00:26:11,072
300

298
00:26:11,328 --> 00:26:17,472
Local John Nicholls

299
00:26:17,728 --> 00:26:22,592
Why do we have this all with 0 why do we have this

300
00:26:26,688 --> 00:26:28,224
The reason is

301
00:26:28,736 --> 00:26:30,272
Self

302
00:26:30,528 --> 00:26:31,808
Don't really do anything

303
00:26:47,168 --> 00:26:53,312
Ring

304
00:27:00,224 --> 00:27:06,368
Take it all with 0 nothing but we want to execute something

305
00:27:06,624 --> 00:27:12,768
And this is

306
00:27:13,536 --> 00:27:15,584
Spotify based on this read

307
00:27:19,424 --> 00:27:23,264
Easy way of overcoming attack

308
00:27:24,544 --> 00:27:27,616
Spectre paper

309
00:27:34,528 --> 00:27:37,088
But to busy now

310
00:27:37,600 --> 00:27:41,952
This is just say

311
00:27:42,208 --> 00:27:44,512
Why does Germany

312
00:27:46,048 --> 00:27:52,192
Time difference between

313
00:27:56,544 --> 00:27:59,616
Make the dogs

314
00:28:00,384 --> 00:28:03,712
Another can no longer do the case-based attack

315
00:28:03,968 --> 00:28:04,992
From JavaScript

316
00:28:11,392 --> 00:28:12,672
Unfortunately though

317
00:28:13,184 --> 00:28:17,536
Do you need a precise clock

318
00:28:18,048 --> 00:28:20,864
General solution

319
00:28:21,632 --> 00:28:27,264
And just speak to can be used all sorts of other attacks

320
00:28:27,520 --> 00:28:29,824
He's a particularly powerful one

321
00:28:32,128 --> 00:28:38,016
Many user programs need to access packet streams amazing to writing a firewall freezer

322
00:28:38,784 --> 00:28:44,928
Notify

323
00:29:00,288 --> 00:29:01,824
Rules

324
00:29:06,432 --> 00:29:08,480
Runs in space

325
00:29:09,504 --> 00:29:13,088
Every single packet that comes through

326
00:29:13,600 --> 00:29:16,416
Are we don't want

327
00:29:16,672 --> 00:29:22,816
Change the office

328
00:29:23,072 --> 00:29:26,400
Change

329
00:29:29,216 --> 00:29:35,360
A little bit of packet filters

330
00:29:35,616 --> 00:29:36,640
BCF

331
00:29:36,896 --> 00:29:40,992
Designs

332
00:29:41,760 --> 00:29:47,904
And essentially a little bit of a very supposedly very weak language but can't

333
00:29:48,160 --> 00:29:54,048
That you want

334
00:29:54,304 --> 00:30:00,192
This process

335
00:30:08,384 --> 00:30:10,688
Stuff

336
00:30:17,856 --> 00:30:24,000
Little compilot

337
00:30:24,256 --> 00:30:25,024
Who sings

338
00:30:31,936 --> 00:30:34,240
BCF is fine for the Hanley packets

339
00:30:35,008 --> 00:30:41,152
Which is more powerful language used for

340
00:30:41,408 --> 00:30:47,552
General interaction between kernel and and user is also used for handling things between

341
00:30:47,808 --> 00:30:48,576
Queen

342
00:30:48,832 --> 00:30:54,976
Machine

343
00:30:56,000 --> 00:31:01,120
And in the process

344
00:31:08,800 --> 00:31:11,104
Ok

345
00:31:11,360 --> 00:31:13,408
The VM guests

346
00:31:19,808 --> 00:31:22,880
Somebody to control what we do

347
00:31:23,136 --> 00:31:29,280
Available to spectre speculative execution they say

348
00:31:33,888 --> 00:31:36,448
Time

349
00:31:37,472 --> 00:31:39,264
So you can

350
00:31:48,736 --> 00:31:51,296
So from my IBM I can find out something about

351
00:31:51,552 --> 00:31:52,832
Something else

352
00:31:54,368 --> 00:32:00,512
How do you overcome that

353
00:32:03,840 --> 00:32:07,936
What are the problems with Spectra not a software error

354
00:32:09,984 --> 00:32:16,128
A bug you can just say well I'll change 51 that's where the problem is

355
00:32:16,384 --> 00:32:19,712
Write down

356
00:32:22,272 --> 00:32:24,832
Complete solution in software

357
00:32:25,856 --> 00:32:30,208
To do anymore

358
00:32:30,976 --> 00:32:37,120
Really really painful that is it a bit because

359
00:32:39,424 --> 00:32:41,728
And also

360
00:32:41,984 --> 00:32:43,264
Is quite slow

361
00:32:43,520 --> 00:32:47,872
101

362
00:32:48,384 --> 00:32:54,016
In the time of one ram access so we don't want to disable execution

363
00:32:54,272 --> 00:33:00,160
So what Intel and AMD and arm have all done

364
00:33:00,416 --> 00:33:06,560
Is offered firmware upgrade

365
00:33:07,072 --> 00:33:08,096
Instructions

366
00:33:08,352 --> 00:33:09,632
Put in these

367
00:33:09,888 --> 00:33:11,936
Michael

368
00:33:17,824 --> 00:33:20,384
Gumtree fixing up a little bit

369
00:33:23,712 --> 00:33:26,528
Also add a new instructions

370
00:33:30,880 --> 00:33:33,184
Forget everything

371
00:33:34,464 --> 00:33:37,024
Yes

372
00:33:37,792 --> 00:33:42,656
Because

373
00:33:42,912 --> 00:33:46,752
Most of the time the Bouncing is true

374
00:33:52,128 --> 00:33:53,408
Anything

375
00:33:54,176 --> 00:34:00,320
So by Beyonce make a random guess it doesn't matter because

376
00:34:00,576 --> 00:34:04,672
Getting information for through anyone there is much

377
00:34:06,208 --> 00:34:08,512
Also

378
00:34:09,024 --> 00:34:13,120
Anglican

379
00:34:13,376 --> 00:34:14,912
I'm running

380
00:34:16,448 --> 00:34:19,008
Different from when running

381
00:34:22,080 --> 00:34:25,152
Instructions for that

382
00:34:25,664 --> 00:34:26,688
And

383
00:34:26,944 --> 00:34:33,088
The latest fixes are more fundamental that they're not just microcode

384
00:34:33,344 --> 00:34:39,488
Actually changing

385
00:34:39,744 --> 00:34:43,072
What is the next

386
00:34:45,376 --> 00:34:46,144
Probably

387
00:34:46,912 --> 00:34:51,008
Perfect

388
00:34:52,800 --> 00:34:58,944
So what are the few things that have been done to try to make this less dangerous

389
00:35:03,552 --> 00:35:05,856
Is the basic

390
00:35:06,112 --> 00:35:10,208
Execution

391
00:35:12,000 --> 00:35:14,560
Highway outside of

392
00:35:14,816 --> 00:35:16,096
Where is supposed to be

393
00:35:17,120 --> 00:35:23,264
Normally

394
00:35:23,776 --> 00:35:25,056
Police code

395
00:35:31,712 --> 00:35:35,808
What's the next higher power of two

396
00:35:37,600 --> 00:35:39,648
And then say

397
00:35:40,416 --> 00:35:46,560
I'm only going to consider a dresses that are end and

398
00:35:52,192 --> 00:35:55,264
Going to rain a long way beyond

399
00:35:55,520 --> 00:35:57,312
So you can read something

400
00:35:57,568 --> 00:36:01,664
Maybe

401
00:36:02,176 --> 00:36:03,200
But it's not

402
00:36:03,456 --> 00:36:07,296
Something

403
00:36:07,808 --> 00:36:09,600
More complex

404
00:36:10,368 --> 00:36:12,160
It takes more time

405
00:36:17,792 --> 00:36:23,936
Is another really beautiful approach called rich Berlin which is the return

406
00:36:31,360 --> 00:36:35,456
Say function name brackets arguments

407
00:36:35,968 --> 00:36:39,296
You need to do is take the program counter

408
00:36:39,552 --> 00:36:41,088
Stored on the stack

409
00:36:41,344 --> 00:36:47,232
You put onto the sack

410
00:36:47,488 --> 00:36:50,560
Return

411
00:36:50,816 --> 00:36:52,352
And returns

412
00:37:10,016 --> 00:37:11,040
So when you

413
00:37:11,296 --> 00:37:12,320
Return

414
00:37:12,576 --> 00:37:15,648
Address

415
00:37:17,440 --> 00:37:21,024
If you want to jump somewhere

416
00:37:22,560 --> 00:37:26,144
Send

417
00:37:26,400 --> 00:37:31,264
When you mess with the return address so that when you read instruction

418
00:37:32,800 --> 00:37:36,896
Who is going to win

419
00:37:38,944 --> 00:37:43,808
OK this is standard

420
00:37:44,576 --> 00:37:46,624
Manipulate

421
00:37:47,136 --> 00:37:53,280
Very efficient branch prediction techniques

422
00:37:53,536 --> 00:37:59,168
Return to before popping off the sack because I remember there was a call

423
00:37:59,424 --> 00:38:05,568
We doing that I'm making sure that when we speculatively return

424
00:38:05,824 --> 00:38:06,336
Who is safe

425
00:38:07,104 --> 00:38:12,480
A little bit leave it there but you never actually get to in terms of the Isa but

426
00:38:12,992 --> 00:38:19,136
FaceTime

427
00:38:19,392 --> 00:38:22,976
How to get to the sack

428
00:38:23,488 --> 00:38:27,840
I'm putting this

429
00:38:29,632 --> 00:38:33,216
And that again is a reasonably efficient way

430
00:38:33,472 --> 00:38:38,592
Old combat

431
00:38:41,664 --> 00:38:43,712
Aggressive approach

432
00:38:43,968 --> 00:38:47,808
Is removing the kernel from every process address space

433
00:38:49,600 --> 00:38:54,464
This is

434
00:38:54,976 --> 00:39:01,120
What are we doing something that was relying very heavily on the CPU

435
00:39:01,376 --> 00:39:02,400
Protecting

436
00:39:03,424 --> 00:39:05,728
This is fine

437
00:39:16,480 --> 00:39:21,600
Johnny game coming

438
00:39:22,112 --> 00:39:28,256
If you're running a computer with a big drive

439
00:39:28,512 --> 00:39:34,656
Computers

440
00:39:34,912 --> 00:39:36,704
Do this every time

441
00:39:36,960 --> 00:39:39,264
You go to

442
00:39:39,520 --> 00:39:40,544
Go to the network

443
00:39:40,800 --> 00:39:46,944
You need to do this context switch flashing the performance penalty

444
00:39:47,200 --> 00:39:49,248
30%

445
00:39:50,016 --> 00:39:51,296
Kinesics

446
00:39:53,600 --> 00:39:55,904
Or not

447
00:40:00,000 --> 00:40:01,280
Joe Bloggs

448
00:40:04,352 --> 00:40:07,168
So he is probably say something

449
00:40:14,592 --> 00:40:17,408
But speaker is just the start

450
00:40:18,432 --> 00:40:24,576
Speaker is famous because it was the first of these type of attack

451
00:40:24,832 --> 00:40:29,184
Micro architectural data sampling attacks

452
00:40:31,488 --> 00:40:33,024
Ain't one of them

453
00:40:33,536 --> 00:40:34,560
Is different

454
00:40:35,072 --> 00:40:38,144
Has a different way of

455
00:40:38,400 --> 00:40:44,544
Giving my critical state space

456
00:40:44,800 --> 00:40:47,872
Different

457
00:40:49,664 --> 00:40:55,040
Keep on coming every and every month or so there's a new one out

458
00:40:55,296 --> 00:41:01,440
You guys are aware of the fundamentals and knowing if I applied

459
00:41:12,960 --> 00:41:16,288
And respond appropriately

460
00:41:16,800 --> 00:41:21,408
That's the end of all I have to say 10 minutes left

461
00:41:21,920 --> 00:41:28,064
I'm more than happy to take questions answers about any aspect of the subject this lecture

462
00:41:32,416 --> 00:41:35,488
That would be great if someone can think of something to ask

463
00:41:42,144 --> 00:41:42,912
Question

464
00:41:53,663 --> 00:41:58,271
Give me the

465
00:42:16,703 --> 00:42:22,847
Ok I have much more complicated if statements essentially how far through does it

466
00:42:24,383 --> 00:42:26,687
Question

467
00:42:29,503 --> 00:42:33,087
It doesn't matter

468
00:42:33,343 --> 00:42:35,903
How complicated the episode is

469
00:42:46,911 --> 00:42:49,215
Jump

470
00:42:51,263 --> 00:42:56,127
Remember a similar language to have

471
00:42:56,383 --> 00:42:58,687
It has

472
00:42:58,943 --> 00:43:05,087
Otherwise

473
00:43:07,903 --> 00:43:09,183
Happens at the end

474
00:43:10,463 --> 00:43:16,607
Big

475
00:43:30,175 --> 00:43:36,319
Then it's important

476
00:43:38,879 --> 00:43:40,415
So

477
00:43:40,671 --> 00:43:46,815
Anything is

478
00:43:47,071 --> 00:43:48,095
1

479
00:43:48,351 --> 00:43:50,911
Another specifically at bounds checking

480
00:43:58,079 --> 00:44:04,223
Amelia

481
00:44:04,479 --> 00:44:07,551
Is very easy to find in somebody's code

482
00:44:08,575 --> 00:44:14,719
Is that enough

483
00:44:16,255 --> 00:44:22,399
That is hard to find so the people

484
00:44:28,031 --> 00:44:29,311
And I found

485
00:44:29,567 --> 00:44:35,711
A sequence

486
00:44:36,223 --> 00:44:37,759
Become susceptible

487
00:44:38,783 --> 00:44:40,575
So

488
00:44:40,831 --> 00:44:46,975
How far is it

489
00:44:47,231 --> 00:44:50,559
You just keep on speaker waiting until

490
00:44:51,071 --> 00:44:52,095
Find out

491
00:44:57,471 --> 00:45:01,823
Can you run out of internal storage to store all the Spectra results

492
00:45:05,407 --> 00:45:08,991
But it can be certainly doesn't

493
00:45:09,247 --> 00:45:12,319
It doesn't have to be later

494
00:45:14,111 --> 00:45:16,159
Classroom

495
00:45:18,719 --> 00:45:19,999
Any other questions

496
00:45:28,703 --> 00:45:31,263
What is a few guys

497
00:45:43,807 --> 00:45:49,951
Ok

498
00:45:50,207 --> 00:45:54,559
Work out what people do and don't know

499
00:45:54,815 --> 00:45:56,351
What Acacia line means

500
00:45:57,631 --> 00:46:01,727
How many people understand how the timing attack on the couch works

501
00:46:02,239 --> 00:46:05,311
How many people don't understand how the case works

502
00:46:06,079 --> 00:46:08,639
Ok

503
00:46:09,663 --> 00:46:13,759
Vacation

504
00:46:14,271 --> 00:46:15,039
Memory

505
00:46:20,671 --> 00:46:26,559
Here is very slow it's very big the case is right next to the CPU

506
00:46:26,815 --> 00:46:29,119
Very fast but it's quite small

507
00:46:34,239 --> 00:46:36,287
If you want to ring something from memory

508
00:46:39,615 --> 00:46:42,943
Entire cake

509
00:46:43,711 --> 00:46:46,271
Can we read

510
00:46:55,487 --> 00:46:56,511
The Kate attack

511
00:46:57,023 --> 00:47:00,863
Happens by clearing all of the stored in the case

512
00:47:02,399 --> 00:47:05,471
And then doing 1 read from memory

513
00:47:06,751 --> 00:47:10,591
1 readers controlled influenced by spectre

514
00:47:14,943 --> 00:47:16,735
Go to ram

515
00:47:21,599 --> 00:47:25,695
So because it will be very fast

516
00:47:26,719 --> 00:47:32,863
Can we just before we did that every other nearby

517
00:47:33,375 --> 00:47:39,519
Slowly got off to ram read it in

518
00:47:39,775 --> 00:47:42,079
Ok and then return it to the process

519
00:47:43,103 --> 00:47:49,247
The spectre attack his time how long does it take to read from this location

520
00:47:50,015 --> 00:47:52,063
How long does it take for it from that location

521
00:47:52,319 --> 00:47:54,367
How long does it take to reach from that location

522
00:47:54,623 --> 00:47:55,391
Etcetera

523
00:47:56,671 --> 00:47:58,719
One of the movie

524
00:48:01,279 --> 00:48:03,071
By the the spectre gadget

525
00:48:03,839 --> 00:48:05,119
Very slow

526
00:48:06,655 --> 00:48:10,495
Doesn't make sense now that didn't understand it earlier

527
00:48:11,775 --> 00:48:14,335
How many people still don't understand it

528
00:48:15,871 --> 00:48:17,663
Would you like me to go through it again

529
00:48:26,111 --> 00:48:28,927
What are you loading in originally

530
00:48:34,303 --> 00:48:36,863
That's right

531
00:48:37,119 --> 00:48:40,191
Will perform this command

532
00:48:41,471 --> 00:48:43,519
It's saying access

533
00:48:44,799 --> 00:48:47,871
This section memory bureau well spaced

534
00:48:48,895 --> 00:48:53,759
Accesses

535
00:48:54,015 --> 00:49:00,159
And he's going to depend on

536
00:49:01,951 --> 00:49:08,095
Doesn't matter too much access that location is going to get whatever

537
00:49:08,351 --> 00:49:10,655
And loaded into the cake

538
00:49:11,679 --> 00:49:16,287
So next time you access space

539
00:49:17,055 --> 00:49:23,199
1 x 10 x 4

540
00:49:23,455 --> 00:49:23,967
Define

541
00:49:24,223 --> 00:49:26,015
Populated with faces

542
00:49:26,783 --> 00:49:28,575
Whangarei well space

543
00:49:30,111 --> 00:49:31,135
So

544
00:49:31,647 --> 00:49:33,439
Is

545
00:49:33,951 --> 00:49:38,559
What is the address that we've been reading if we were the same address again

546
00:49:38,815 --> 00:49:39,839
10 whiskeys

547
00:49:45,727 --> 00:49:51,615
I'm in the attack again

548
00:49:55,711 --> 00:49:56,735
Good question

549
00:49:58,783 --> 00:49:59,807
Any other questions

550
00:50:01,855 --> 00:50:02,367
Yes

551
00:50:21,055 --> 00:50:24,127
Ok?

552
00:50:24,383 --> 00:50:27,967
Coastline been accessed

553
00:50:28,223 --> 00:50:29,247
What's next

554
00:50:31,807 --> 00:50:37,439
So what

555
00:50:39,999 --> 00:50:45,119
ND anything anywhere

556
00:50:47,423 --> 00:50:49,983
Where the browser keeps it's passwords

557
00:50:51,007 --> 00:50:56,895
If you know where it's keys if you know where

558
00:50:59,199 --> 00:51:01,247
Beta

559
00:51:02,271 --> 00:51:07,391
Expected you should be able to read

560
00:51:13,791 --> 00:51:15,071
Young

561
00:51:15,327 --> 00:51:21,471
Witches secret

562
00:51:23,519 --> 00:51:25,055
Once you have the dater

563
00:51:26,079 --> 00:51:27,103
Knowledge is power

564
00:51:42,463 --> 00:51:48,351
If you switch around with them constantly would they get around this essentially yes

565
00:51:56,287 --> 00:52:02,431
Location

566
00:52:05,247 --> 00:52:11,391
Bus

567
00:52:13,439 --> 00:52:14,719
Good question

568
00:52:15,999 --> 00:52:20,095
Are you ok with the answer of what to do with the date 2 months ago

569
00:52:20,607 --> 00:52:21,119
Yes

570
00:52:29,567 --> 00:52:33,663
Before doing the attack clear the couch that's right

571
00:52:33,919 --> 00:52:36,479
How busy instructions is clear the case

572
00:52:43,903 --> 00:52:46,719
A user can clear the case

573
00:52:47,487 --> 00:52:48,511
Iceland

574
00:52:48,767 --> 00:52:54,911
And you don't know

575
00:52:55,167 --> 00:52:58,751
How you should live in memory to give you the fastest possible access

576
00:52:59,263 --> 00:53:02,335
So you might

577
00:53:02,591 --> 00:53:06,687
As part of doing that experiment

578
00:53:07,199 --> 00:53:10,783
Uses a given permission to create a case

579
00:53:18,719 --> 00:53:20,511
Yes

580
00:53:21,791 --> 00:53:27,935
Use a user

581
00:53:28,191 --> 00:53:28,959
Process

582
00:53:29,471 --> 00:53:32,543
Are you the process will say the case

583
00:53:33,055 --> 00:53:34,591
And then do this attack

584
00:53:38,431 --> 00:53:42,271
Centrelink know when the case is clear clear the case

585
00:53:45,599 --> 00:53:49,951
People finding out another letterhead to

586
00:53:50,207 --> 00:53:55,583
Questions

587
00:53:56,095 --> 00:54:02,239
Hang out in front of the door for you to answer questions
